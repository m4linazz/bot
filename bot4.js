const { Bot, InlineKeyboard } = require('grammy');

const bot = new Bot('7387266503:AAHApn-sDU8f442Sxay3rjNgJBnixtQBTpo');

bot.command('start', (ctx) => {
    ctx.reply('–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —Å—ã–≥—Ä–∞–µ–º –≤ –ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã, –ë—É–º–∞–≥–∞! –ù–∞–ø–∏—à–∏ /play, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! üòä');
});

bot.command('help', (ctx) => {
    ctx.reply('/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n/help - –ø–æ–º–æ—â—å\n/play - —Å—ã–≥—Ä–∞—Ç—å –≤ –ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã, –ë—É–º–∞–≥–∞');
});

bot.command('play', (ctx) => {
    const keyboard = new InlineKeyboard()
        .text('–ö–∞–º–µ–Ω—å', 'rock')
        .text('–ù–æ–∂–Ω–∏—Ü—ã', 'scissors')
        .text('–ë—É–º–∞–≥–∞', 'paper');

    ctx.reply('–í—ã–±–µ—Ä–∏ –ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –ë—É–º–∞–≥—É:', { reply_markup: keyboard });
});

bot.on('callback_query:data', async (ctx) => {
    const data = ctx.callbackQuery.data;

    if (['rock', 'scissors', 'paper'].includes(data)) {
        const choices = {
            'rock': '–ö–∞–º–µ–Ω—å',
            'scissors': '–ù–æ–∂–Ω–∏—Ü—ã',
            'paper': '–ë—É–º–∞–≥–∞'
        };

        const botChoiceKey = ['rock', 'scissors', 'paper'][Math.floor(Math.random() * 3)];
        const userChoice = choices[data];
        const botChoice = choices[botChoiceKey];

        let resultMessage;

        if (data === botChoiceKey) {
            resultMessage = `–¢—ã –≤—ã–±—Ä–∞–ª ${userChoice}, —è –≤—ã–±—Ä–∞–ª ${botChoice}. –ù–∏—á—å—è! üòâ`;
        } else if (
            (data === 'rock' && botChoiceKey === 'scissors') ||
            (data === 'scissors' && botChoiceKey === 'paper') ||
            (data === 'paper' && botChoiceKey === 'rock')
        ) {
            resultMessage = `–¢—ã –≤—ã–±—Ä–∞–ª ${userChoice}, —è –≤—ã–±—Ä–∞–ª ${botChoice}. –¢—ã –≤—ã–∏–≥—Ä–∞–ª! üéâ`;
        } else {
            resultMessage = `–¢—ã –≤—ã–±—Ä–∞–ª ${userChoice}, —è –≤—ã–±—Ä–∞–ª ${botChoice}. –Ø –≤—ã–∏–≥—Ä–∞–ª! üòú`;
        }

        const playAgainKeyboard = new InlineKeyboard()
            .text('–°—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑', 'play_again')
            .text('–ó–∞–∫–æ–Ω—á–∏—Ç—å', 'no_thanks');

        await ctx.reply(resultMessage, { reply_markup: playAgainKeyboard });
    } else if (data === 'play_again') {
        ctx.reply('–ù–∞–ø–∏—à–∏ /play, —á—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞!');
    } else if (data === 'no_thanks') {
        ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –µ—â–µ. üòä');
    }
});

bot.start();
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');
