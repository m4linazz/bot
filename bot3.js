const { Bot, InlineKeyboard } = require('grammy');

const bot = new Bot('YOUR_BOT_TOKEN'); // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

bot.command('start', (ctx) => {
    const keyboard = new InlineKeyboard()
        .text('–û—Ä–µ–ª –∏ –†–µ—à–∫–∞', 'game_coin')
        .row()
        .text('–ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã, –ë—É–º–∞–≥–∞', 'game_rps');

    ctx.reply('–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:', { reply_markup: keyboard });
});

bot.command('help', (ctx) => {
    ctx.reply(
        '/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤—ã–±–æ—Ä –∏–≥—Ä—ã\n' +
        '/help - –ø–æ–º–æ—â—å\n' +
        '/play_coin - —Å—ã–≥—Ä–∞—Ç—å –≤ –û—Ä–µ–ª –∏ –†–µ—à–∫–∞\n' +
        '/play_rps - —Å—ã–≥—Ä–∞—Ç—å –≤ –ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã, –ë—É–º–∞–≥–∞'
    );
});

// –ò–≥—Ä–∞ "–û—Ä–µ–ª –∏ –†–µ—à–∫–∞"
bot.command('play_coin', (ctx) => {
    const keyboard = new InlineKeyboard()
        .text('–û—Ä–µ–ª', 'orel')
        .text('–†–µ—à–∫–∞', 'reshka');

    ctx.reply('–í—ã–±–µ—Ä–∏ –û—Ä–µ–ª –∏–ª–∏ –†–µ—à–∫–∞:', { reply_markup: keyboard });
});

// –ò–≥—Ä–∞ "–ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã, –ë—É–º–∞–≥–∞"
bot.command('play_rps', (ctx) => {
    const keyboard = new InlineKeyboard()
        .text('–ö–∞–º–µ–Ω—å ü™®', 'rock')
        .text('–ù–æ–∂–Ω–∏—Ü—ã ‚úÇÔ∏è', 'scissors')
        .text('–ë—É–º–∞–≥–∞ üìÑ', 'paper');

    ctx.reply('–í—ã–±–µ—Ä–∏ –ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –ë—É–º–∞–≥—É:', { reply_markup: keyboard });
});

bot.on('callback_query:data', async (ctx) => {
    const data = ctx.callbackQuery.data;

    // –õ–æ–≥–∏–∫–∞ –¥–ª—è –∏–≥—Ä—ã "–û—Ä–µ–ª –∏ –†–µ—à–∫–∞"
    if (data === 'orel' || data === 'reshka') {
        const result = Math.random() < 0.5 ? 'orel' : 'reshka';
        const userChoice = data === 'orel' ? '–û—Ä–µ–ª' : '–†–µ—à–∫–∞';
        const botResult = result === 'orel' ? '–û—Ä–µ–ª' : '–†–µ—à–∫–∞';

        const resultMessage = userChoice === botResult
            ? `–¢—ã –≤—ã–±—Ä–∞–ª ${userChoice}, –∏ —ç—Ç–æ —Å–æ–≤–ø–∞–ª–æ! üéâ –°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?`
            : `–¢—ã –≤—ã–±—Ä–∞–ª ${userChoice}, –Ω–æ –≤—ã–ø–∞–ª ${botResult}. üòû –°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?`;

        const playAgainKeyboard = new InlineKeyboard()
            .text('–î–∞', 'play_coin_again')
            .text('–ù–µ—Ç', 'no_thanks');

        await ctx.reply(resultMessage, { reply_markup: playAgainKeyboard });
    }

    // –õ–æ–≥–∏–∫–∞ –¥–ª—è –∏–≥—Ä—ã "–ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã, –ë—É–º–∞–≥–∞"
    else if (['rock', 'scissors', 'paper'].includes(data)) {
        const choices = ['rock', 'scissors', 'paper'];
        const botChoice = choices[Math.floor(Math.random() * choices.length)];

        const choiceToEmoji = {
            rock: '–ö–∞–º–µ–Ω—å ü™®',
            scissors: '–ù–æ–∂–Ω–∏—Ü—ã ‚úÇÔ∏è',
            paper: '–ë—É–º–∞–≥–∞ üìÑ',
        };

        let resultMessage;

        if (data === botChoice) {
            resultMessage = `–¢—ã –≤—ã–±—Ä–∞–ª ${choiceToEmoji[data]}, –∏ —è –≤—ã–±—Ä–∞–ª ${choiceToEmoji[botChoice]}. –≠—Ç–æ –Ω–∏—á—å—è! ü§ù`;
        } else if (
            (data === 'rock' && botChoice === 'scissors') ||
            (data === 'scissors' && botChoice === 'paper') ||
            (data === 'paper' && botChoice === 'rock')
        ) {
            resultMessage = `–¢—ã –≤—ã–±—Ä–∞–ª ${choiceToEmoji[data]}, –∏ —è –≤—ã–±—Ä–∞–ª ${choiceToEmoji[botChoice]}. –¢—ã –ø–æ–±–µ–¥–∏–ª! üéâ`;
        } else {
            resultMessage = `–¢—ã –≤—ã–±—Ä–∞–ª ${choiceToEmoji[data]}, –∏ —è –≤—ã–±—Ä–∞–ª ${choiceToEmoji[botChoice]}. –Ø –ø–æ–±–µ–¥–∏–ª! üòà`;
        }

        const playAgainKeyboard = new InlineKeyboard()
            .text('–°—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞', 'play_rps_again')
            .text('–ó–∞–≤–µ—Ä—à–∏—Ç—å', 'no_thanks');

        await ctx.reply(resultMessage, { reply_markup: playAgainKeyboard });
    }

    // –ü–æ–≤—Ç–æ—Ä –∏–≥—Ä
    else if (data === 'play_coin_again') {
        ctx.reply('–ù–∞–ø–∏—à–∏ /play_coin, —á—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞!');
    } else if (data === 'play_rps_again') {
        ctx.reply('–ù–∞–ø–∏—à–∏ /play_rps, —á—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞!');
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    else if (data === 'no_thanks') {
        ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –µ—â–µ. üòä');
    }

    await ctx.answerCallbackQuery(); // –ó–∞–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
});

bot.start();
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');
