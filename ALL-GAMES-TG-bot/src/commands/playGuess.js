const gameState = {};

const playGuess = (ctx) => {
    const userId = ctx.from.id;

    const randomNumber = Math.floor(Math.random() * 100) + 1;
    gameState[userId] = { number: randomNumber, attempts: 0 };

    ctx.reply('–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!');
};

const handleGuess = (ctx) => {
    const userId = ctx.from.id;

    if (!gameState[userId]) {
        ctx.reply('–ù–∞–ø–∏—à–∏ /play_guess, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É.');
        return;
    }

    const userGuess = parseInt(ctx.message.text, 10);

    if (isNaN(userGuess)) {
        ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ.');
        return;
    }

    const { number, attempts } = gameState[userId];
    gameState[userId].attempts += 1;

    if (userGuess === number) {
        ctx.reply(`–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ ${number} –∑–∞ ${attempts + 1} –ø–æ–ø—ã—Ç–æ–∫! üéâ`);
        delete gameState[userId];
    } else {
        ctx.reply(userGuess < number ? '–ú–æ—ë —á–∏—Å–ª–æ –±–æ–ª—å—à–µ.' : '–ú–æ—ë —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ.');
    }
};

module.exports = { playGuess, handleGuess };
