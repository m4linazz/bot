const { InlineKeyboard } = require('grammy');

const playRPS = (ctx) => {
    const keyboard = new InlineKeyboard()
        .text('–ö–∞–º–µ–Ω—å', 'rock')
        .text('–ù–æ–∂–Ω–∏—Ü—ã', 'scissors')
        .text('–ë—É–º–∞–≥–∞', 'paper');

    ctx.reply('–í—ã–±–µ—Ä–∏ –ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –ë—É–º–∞–≥—É:', { reply_markup: keyboard });
};

const handleRPS = async (ctx) => {
    const data = ctx.callbackQuery.data;
    const choices = { rock: '–ö–∞–º–µ–Ω—å', scissors: '–ù–æ–∂–Ω–∏—Ü—ã', paper: '–ë—É–º–∞–≥–∞' };

    if (['rock', 'scissors', 'paper'].includes(data)) {
        const botChoiceKey = ['rock', 'scissors', 'paper'][Math.floor(Math.random() * 3)];
        const userChoice = choices[data];
        const botChoice = choices[botChoiceKey];

        const resultMessage = data === botChoiceKey
            ? `–¢—ã –≤—ã–±—Ä–∞–ª ${userChoice}, —è –≤—ã–±—Ä–∞–ª ${botChoice}. –ù–∏—á—å—è! üòâ`
            : (data === 'rock' && botChoiceKey === 'scissors') ||
              (data === 'scissors' && botChoiceKey === 'paper') ||
              (data === 'paper' && botChoiceKey === 'rock')
            ? `–¢—ã –≤—ã–±—Ä–∞–ª ${userChoice}, —è –≤—ã–±—Ä–∞–ª ${botChoice}. –¢—ã –≤—ã–∏–≥—Ä–∞–ª! üéâ`
            : `–¢—ã –≤—ã–±—Ä–∞–ª ${userChoice}, —è –≤—ã–±—Ä–∞–ª ${botChoice}. –Ø –≤—ã–∏–≥—Ä–∞–ª! üòú`;

        await ctx.reply(resultMessage);
    }
};

module.exports = { playRPS, handleRPS };
